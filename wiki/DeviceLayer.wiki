#summary An explanation of what a Device abstraction layer is.

= Introduction =
To fully de-couple our software design with any underlying implementation specific devices, it has become necessary to introduce what is called the DeviceLayer.
This works in much the same way as commerical operating systems which have their own Hardware Abstraction Layer (HAL) or similar things.

The purpose of this layer is to make our code portable over a range of different devices, not limited to i2c devices, virtual devices, and any other that may become useful. Not only that, this layer provides us with the opportunity to implement software 'closed' feedback systems, and extra functionality that normally should be hidden from the software that sits above this layer.



-- The Devices --

Currently defined abstract devices are:
 * IMotor
 * IInfrared(Array) - stores angular, and range configurations of a number of infrared
 * IUltrasound(Array) - stores angular and range configurations of a number of  ultrasound sensors.
 * ICompass - something that uses the Earth's magnetic field to derive an orientation.


Currently implementing devices are:
 * I2CMotor
 * I2CCompass
 * I2CInfrared(Array)
 * I2CUltrasound(Array)